// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole        @default(USER)
  Authenticator Authenticator[]

  stripeCustomerId String? @unique
  Subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model ResetPasswordToken {
  id String @id @default(cuid())
  email String @unique
  token String @unique
  expires DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model Subscription {
  id                 Int      @id @default(autoincrement())
  stripeId           String   @unique
  interval           String
  status             String
  currentPeriodEnd   Int
  currentPeriodStart Int

  User   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?

  price   Price?  @relation(fields: [priceId], references: [id])
  priceId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Price {
  id             Int           @id @default(autoincrement())
  stripePriceId  String        @unique
  amount         Float
  interval       String
  product        Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      String
  active         Boolean       @default(true)

  subscriptions  Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                String   @id @default(cuid())
  stripeId          String   @unique
  name              String
  description       String?
  active            Boolean  @default(true)
  marketing_features String[] // Adicionando o novo campo
  prices            Price[]
  plans             Plan[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Plan {
  id             String   @id @default(cuid())
  stripeId       String   @unique
  productId      String
  nickname       String?
  amount         Float
  currency       String
  interval       String
  intervalCount  Int
  active         Boolean  @default(true)
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum UserRole {
  ADMIN
  USER
}
